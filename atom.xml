<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chalie&#39;s Blog</title>
  <subtitle>Don&#39;t be the same,BE BETTER!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cirfe.github.io/"/>
  <updated>2016-11-15T15:03:11.690Z</updated>
  <id>https://cirfe.github.io/</id>
  
  <author>
    <name>Charlie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Scala学习(一)：基本数据类型</title>
    <link href="https://cirfe.github.io/2016/11/15/learn-scala-1/"/>
    <id>https://cirfe.github.io/2016/11/15/learn-scala-1/</id>
    <published>2016-11-15T14:31:52.000Z</published>
    <updated>2016-11-15T15:03:11.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><ul>
<li>Byte     8位有符号补码整数($-2^7$ ~ $ 2^7 $-1)</li>
<li>Short    16位有符号补码整数($-2^{15}$~$2^{15}$-1)</li>
<li>Int      32位有符号补码整数($-2^{31}$~$2^{31}$-1)</li>
<li>Long     64位有符号补码整数($-2^{63}$~$2^{63}$-1)</li>
<li>Char     16位无符号Unicode字符（0~$2^{16}$-1)</li>
<li>String   char 序列</li>
<li>Float    32位IEEE754单精度浮点数</li>
<li>Double   64位IEEE754单精度浮点数</li>
<li>Boolean  true或false<a id="more"></a> 
<strong>String归于java.lang,其余所有基本类型都是包scala的成员</strong></li>
</ul>
<h2 id="操作符和方法"><a href="#操作符和方法" class="headerlink" title="操作符和方法"></a>操作符和方法</h2><p>Scala为基本类型提供了丰富的操作符集，而这些操作符实际只是普通方法调用的另一种形式，例如1 + 2和1.+(2)其实是一回事，因为<strong>Scala的基本类型也是对象</strong>。</p>
<h3 id="任何方法都可以是操作符"><a href="#任何方法都可以是操作符" class="headerlink" title="任何方法都可以是操作符"></a>任何方法都可以是操作符</h3><p>Scala里的操作符不是特殊的语法，任何方法都可以是操作符。到底是方法还是操作符取决于如何使用它。如果写成<code>s.indexOf(&#39;o&#39;)</code>,indexOf就不是操作符，但如果写成<code>s indexOf &#39;o&#39;</code>,那么indexOf就是操作符。</p>
<h3 id="关于前缀操作符和后缀操作符"><a href="#关于前缀操作符和后缀操作符" class="headerlink" title="关于前缀操作符和后缀操作符"></a>关于前缀操作符和后缀操作符</h3><p>中缀操作符是二元操作符，而前缀操作符和后缀操作符都是一元的。前缀操作符例子，-2.0,!found，这些前缀操作符和中缀操作符一样，都是值类型对象调用方法的简写形式，然而这种情况下，方法名在操作符字符上前缀<code>unary_</code>,例如Scala会把表达式-2.0转化成方法调用：(-2.0).unary_-。标识符中能作为前缀操作符的只有<strong>+、-、!、~</strong>。因此对类型定义了unary_!的方法，就可以对值或变量用!p这样的方式调用，但是即使定义了unary_*的方法，也不能用*p调用，因为*不是那四个操作符之一。如果像*p这样调用，Scala会理解为*.p，可能会出现莫名错误。</p>
<blockquote>
<p>在Scala里，方法调用的<strong>空括号</strong>可以省略，惯例是如果方法带有副作用就加上括号，如println();如果没有副作用就去掉括号,如String的toLowerCase方法。</p>
</blockquote>
<h3 id="操作符优先级"><a href="#操作符优先级" class="headerlink" title="操作符优先级"></a>操作符优先级</h3><table>
<thead>
<tr>
<th style="text-align:center">操作符优先级（降序）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">* / %</td>
</tr>
<tr>
<td style="text-align:center">+ -</td>
</tr>
<tr>
<td style="text-align:center">:</td>
</tr>
<tr>
<td style="text-align:center">!=</td>
</tr>
<tr>
<td style="text-align:center">&lt;&gt;</td>
</tr>
<tr>
<td style="text-align:center">&amp;</td>
</tr>
<tr>
<td style="text-align:center">^</td>
</tr>
<tr>
<td style="text-align:center">\</td>
</tr>
<tr>
<td style="text-align:center">(所有字母)</td>
</tr>
<tr>
<td style="text-align:center">(所有赋值操作符)</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本类型&quot;&gt;&lt;a href=&quot;#基本类型&quot; class=&quot;headerlink&quot; title=&quot;基本类型&quot;&gt;&lt;/a&gt;基本类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Byte     8位有符号补码整数($-2^7$ ~ $ 2^7 $-1)&lt;/li&gt;
&lt;li&gt;Short    16位有符号补码整数($-2^{15}$~$2^{15}$-1)&lt;/li&gt;
&lt;li&gt;Int      32位有符号补码整数($-2^{31}$~$2^{31}$-1)&lt;/li&gt;
&lt;li&gt;Long     64位有符号补码整数($-2^{63}$~$2^{63}$-1)&lt;/li&gt;
&lt;li&gt;Char     16位无符号Unicode字符（0~$2^{16}$-1)&lt;/li&gt;
&lt;li&gt;String   char 序列&lt;/li&gt;
&lt;li&gt;Float    32位IEEE754单精度浮点数&lt;/li&gt;
&lt;li&gt;Double   64位IEEE754单精度浮点数&lt;/li&gt;
&lt;li&gt;Boolean  true或false
    
    </summary>
    
      <category term="scala" scheme="https://cirfe.github.io/categories/scala/"/>
    
    
      <category term="数据类型" scheme="https://cirfe.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="操作符" scheme="https://cirfe.github.io/tags/%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://cirfe.github.io/2016/11/14/hello-world/"/>
    <id>https://cirfe.github.io/2016/11/14/hello-world/</id>
    <published>2016-11-14T08:30:45.544Z</published>
    <updated>2016-11-14T08:30:45.544Z</updated>
    
    <content type="html"><![CDATA[<p>折腾了一天总算是基本搞定了。记录下几个问题：</p>
<h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><h3 id="安装hexo出问题"><a href="#安装hexo出问题" class="headerlink" title="安装hexo出问题"></a>安装hexo出问题</h3><p>  第一次安装NodeJS的时候采用的apt方式安装，然后再装hexo出现了莫名其妙的问题。安装最新的NodeJS问题解决。</p>
<h3 id="使用npm安装组件卡住"><a href="#使用npm安装组件卡住" class="headerlink" title="使用npm安装组件卡住"></a>使用npm安装组件卡住</h3><a id="more"></a>
<p>  使用淘宝源，在命令后添加 –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="external">https://registry.npm.taobao.org</a>.<br>  例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$npm</span> install hexo-server --save --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>
<h3 id="deploy后，在github上访问出现大量空白"><a href="#deploy后，在github上访问出现大量空白" class="headerlink" title="deploy后，在github上访问出现大量空白"></a>deploy后，在github上访问出现大量空白</h3><p>  github的问题，<a href="https://github.com/iissnan/hexo-theme-next/issues/1214" target="_blank" rel="external">解决方法</a></p>
<h2 id="hexo-的简单使用"><a href="#hexo-的简单使用" class="headerlink" title="hexo 的简单使用"></a>hexo 的简单使用</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;折腾了一天总算是基本搞定了。记录下几个问题：&lt;/p&gt;
&lt;h2 id=&quot;Questions&quot;&gt;&lt;a href=&quot;#Questions&quot; class=&quot;headerlink&quot; title=&quot;Questions&quot;&gt;&lt;/a&gt;Questions&lt;/h2&gt;&lt;h3 id=&quot;安装hexo出问题&quot;&gt;&lt;a href=&quot;#安装hexo出问题&quot; class=&quot;headerlink&quot; title=&quot;安装hexo出问题&quot;&gt;&lt;/a&gt;安装hexo出问题&lt;/h3&gt;&lt;p&gt;  第一次安装NodeJS的时候采用的apt方式安装，然后再装hexo出现了莫名其妙的问题。安装最新的NodeJS问题解决。&lt;/p&gt;
&lt;h3 id=&quot;使用npm安装组件卡住&quot;&gt;&lt;a href=&quot;#使用npm安装组件卡住&quot; class=&quot;headerlink&quot; title=&quot;使用npm安装组件卡住&quot;&gt;&lt;/a&gt;使用npm安装组件卡住&lt;/h3&gt;
    
    </summary>
    
      <category term="Web" scheme="https://cirfe.github.io/categories/Web/"/>
    
    
      <category term="Hexo" scheme="https://cirfe.github.io/tags/Hexo/"/>
    
      <category term="Github" scheme="https://cirfe.github.io/tags/Github/"/>
    
  </entry>
  
</feed>
