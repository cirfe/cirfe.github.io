<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chalie&#39;s Blog</title>
  <subtitle>Don&#39;t be the same,BE BETTER!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cirfe.github.io/"/>
  <updated>2016-11-25T14:35:28.451Z</updated>
  <id>https://cirfe.github.io/</id>
  
  <author>
    <name>Charlie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Scala学习(三)：基本函数定义</title>
    <link href="https://cirfe.github.io/2016/11/25/learn-scala-3/"/>
    <id>https://cirfe.github.io/2016/11/25/learn-scala-3/</id>
    <published>2016-11-25T14:00:00.000Z</published>
    <updated>2016-11-25T14:35:28.451Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Scala函数基本结构"><a href="#Scala函数基本结构" class="headerlink" title="Scala函数基本结构"></a>Scala函数基本结构</h3><p><img src="https://coding.net/u/cirfe/p/pictures/git/raw/master/scala%25E5%2587%25BD%25E6%2595%25B0%25E5%25AE%259A%25E4%25B9%2589.jpg" alt="函数结构"><br><a id="more"></a><br>Scala可以不使用return，默认函数体的最后一条表达式结果为返回值。</p>
<h3 id="关于简写"><a href="#关于简写" class="headerlink" title="关于简写"></a>关于简写</h3><ul>
<li>返回值类型可不写，Scala可以自动推导，除非函数为递推函数或者函数使用了return。</li>
<li>没有返回值时，等号可以省去。</li>
<li>如果函数体只有一条语句，则大括号可以省去。但是等号和大括号不可以同时省去。</li>
<li>如果有参数，则参数类型不可省。如果没有参数，则可以使用空小括号也可以省去小括号。<ol>
<li>对于使用空括号的函数，<code>def fn(){println(&quot;hello&quot;)}</code> 可以用<code>fn</code>或者<code>fn()</code>调用</li>
<li>对于不使用括号的函数，<code>def fn{println(&quot;hello&quot;)}</code> 只能用<code>fn</code>调用。</li>
</ol>
</li>
</ul>
<h3 id="再赋值等式本身也是Unit值。"><a href="#再赋值等式本身也是Unit值。" class="headerlink" title="再赋值等式本身也是Unit值。"></a>再赋值等式本身也是Unit值。</h3><p>这一点与其他语言不通。在Scala中再赋值等式本身是Unit值，例如<br>这条等式本身是Unit，所以<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>((line = <span class="built_in">read</span>Line()) != <span class="string">""</span>)  //不起作用</div></pre></td></tr></table></figure></p>
<p>因为<code>line = readLine()</code>返回Unit，而Unit与String比较永远返回True</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Scala函数基本结构&quot;&gt;&lt;a href=&quot;#Scala函数基本结构&quot; class=&quot;headerlink&quot; title=&quot;Scala函数基本结构&quot;&gt;&lt;/a&gt;Scala函数基本结构&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://coding.net/u/cirfe/p/pictures/git/raw/master/scala%25E5%2587%25BD%25E6%2595%25B0%25E5%25AE%259A%25E4%25B9%2589.jpg&quot; alt=&quot;函数结构&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="函数定义" scheme="https://cirfe.github.io/tags/%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89/"/>
    
      <category term="函数简写" scheme="https://cirfe.github.io/tags/%E5%87%BD%E6%95%B0%E7%AE%80%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>Scala学习(二)：控制结构</title>
    <link href="https://cirfe.github.io/2016/11/23/learn-scala-2/"/>
    <id>https://cirfe.github.io/2016/11/23/learn-scala-2/</id>
    <published>2016-11-23T13:31:52.000Z</published>
    <updated>2016-11-23T13:46:29.830Z</updated>
    
    <content type="html"><![CDATA[<p>scala的控制结构，仅有if,while,for,try,match和函数调用而已。</p>
<h2 id="If表达式"><a href="#If表达式" class="headerlink" title="If表达式"></a>If表达式</h2><p>Scala的if语句与其他语言if语句，没有什么不同，但是Scala的if语句是能返回值的表达式。例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">val filename = <span class="keyword">if</span>(!args.isEmpty) args(0) <span class="keyword">else</span> <span class="string">"default.txt"</span></div></pre></td></tr></table></figure></p>
<a id="more"></a> 
<h2 id="While表达式"><a href="#While表达式" class="headerlink" title="While表达式"></a>While表达式</h2><p>与其他语言的while表达式一致，同时也有do while循环。例如<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">def gcdLoop(x: Long,y: Long): Long=&#123;</div><div class="line">    var a = x</div><div class="line">    var b = y</div><div class="line">    <span class="keyword">while</span>(a != 0)&#123;</div><div class="line">        val temp = a</div><div class="line">        a = b % a</div><div class="line">        b = temp</div><div class="line">    &#125;</div><div class="line">    b</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">var line = <span class="string">""</span></div><div class="line"><span class="keyword">do</span>&#123;</div><div class="line">    line = <span class="built_in">read</span>Line()</div><div class="line">    println(<span class="string">"Read: "</span> + line)</div><div class="line">&#125;<span class="keyword">while</span>(line != <span class="string">""</span>)</div></pre></td></tr></table></figure>
<p><strong>while和do-while被称为循环，而不是表达式，因为它们不能产生有意义的结果，它们的结果类型是Unit。正因为如此，Scala中用while并不多，多数情况下可以用其他方式代替</strong></p>
<h2 id="For表达式"><a href="#For表达式" class="headerlink" title="For表达式"></a>For表达式</h2><h3 id="枚举集合类"><a href="#枚举集合类" class="headerlink" title="枚举集合类"></a>枚举集合类</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">val filesHere = (new java.io.File(<span class="string">"."</span>)).listFiles</div><div class="line"><span class="keyword">for</span>(file &lt;- filesHere) println(file)</div></pre></td></tr></table></figure>
<p>这里filesHere是一个数组（Array),类似于”file &lt;- filesHere” 这种语法被称为生成器(generate)语法。</p>
<h3 id="卫语句"><a href="#卫语句" class="headerlink" title="卫语句"></a>卫语句</h3><p>在for循环中添加一个或多个条件语句，达到过滤功能。<br>例如：仅列出当前目录中以”.scala”结尾的文件名：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">val filesHere = (new java.io.File(<span class="string">"."</span>)).listFiles</div><div class="line"><span class="keyword">for</span>(file &lt;- filesHere <span class="keyword">if</span> file.getName.endsWith(<span class="string">".scala"</span>)) </div><div class="line">    println(file)</div></pre></td></tr></table></figure></p>
<p>可以使用任意多的卫语句,例如以下语句仅打印数字4<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>&#123;</div><div class="line">    i &lt;- 1 to 10</div><div class="line">    <span class="keyword">if</span> i &gt; 3</div><div class="line">    <span class="keyword">if</span> i &lt; 6</div><div class="line">    <span class="keyword">if</span> i % 2 == 0</div><div class="line">&#125;println(i)</div></pre></td></tr></table></figure></p>
<h3 id="枚举嵌套"><a href="#枚举嵌套" class="headerlink" title="枚举嵌套"></a>枚举嵌套</h3><p>在for循环中使用多个发生器，类似于多层循环。例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">for</span>(i &lt;- 1 to 2;j &lt;- 1 to 2) println(s<span class="string">"i = <span class="variable">$i</span>,j = <span class="variable">$j</span>"</span>)</div><div class="line">i = 1,j = 1</div><div class="line">i = 1,j = 2</div><div class="line">i = 2,j = 1</div><div class="line">i = 2,j = 2</div></pre></td></tr></table></figure></p>
<p>又例如以下for表达式，有两个嵌套循环，外层的循环枚举filesHere，内层的枚举所有以.scala结尾文件的fileLines(file)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">def fileLines(file: java.io.File) = </div><div class="line">    scala.io.Source.fromFIle(file).getLine.toList</div><div class="line">def grep(pattern: String)</div><div class="line">    <span class="keyword">for</span>&#123;</div><div class="line">        file &lt;- filesHere</div><div class="line">        <span class="keyword">if</span> file.getName.endsWith(<span class="string">".scala"</span>)</div><div class="line">        line &lt;- fileLines(file)</div><div class="line">        <span class="keyword">if</span> line.trim.matches(pattern)</div><div class="line">    &#125;println(file + <span class="string">": "</span> + line.trim)</div><div class="line">grep(<span class="string">".*gcd.*"</span>)</div></pre></td></tr></table></figure></p>
<h3 id="流间（mid-stream-变量绑定"><a href="#流间（mid-stream-变量绑定" class="headerlink" title="流间（mid-stream)变量绑定"></a>流间（mid-stream)变量绑定</h3><p>前面代码段中重复出现的表达式line.trim，可以用等号把结果绑定到新变量中，避免重复计算。绑定的变量被当作val引入和使用，不过不带关键字val。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">def grep(pattern: String) =</div><div class="line">    <span class="keyword">for</span>&#123;</div><div class="line">        file &lt;- filesHere</div><div class="line">        <span class="keyword">if</span> file.getName.endsWith(<span class="string">".scala"</span>)</div><div class="line">        line &lt;- fileLines(file)</div><div class="line">        trimmed = line.trim</div><div class="line">        <span class="keyword">if</span> trimmed.matches(pattern)</div><div class="line">    &#125;println(file + <span class="string">": "</span> + trimmed)</div></pre></td></tr></table></figure></p>
<h3 id="制造新集合（for-yield组合）"><a href="#制造新集合（for-yield组合）" class="headerlink" title="制造新集合（for/yield组合）"></a>制造新集合（for/yield组合）</h3><p>当在for循环中不使用yield时，它仅仅是对集合上每个元素进行了操作，并没有返回新的集合。使用yield时，可以创建并返回一个新的集合。<br>for-yield表达式的语法是这样的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>&#123;字句&#125; yield&#123;循环体&#125;</div></pre></td></tr></table></figure></p>
<p>yield在整个循环体之前，即使循环体是被花括号包围的代码块，也一定要把yield放在左括号之前。如下的格式是错误的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(file &lt;- filesHere <span class="keyword">if</span> file.getName.endsWith(<span class="string">".scala"</span>))&#123;</div><div class="line">    yield file  //wrong！！！</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>除了极个别的情况，for-yield不会改变集合的返回类型。<br><strong>不带卫语句的for-yield表达式就像是在集合上调用map方法</strong></p>
<h2 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h2><p>Scala没有break和continue关键字，因为他们与函数式字面量啮合的不好。可以考虑用if替换每个continue，用布尔变量替换每个break。例如，假设你正搜索一个参数列表去查找是否存在以”.scala”结尾但不以连号开头的字符串，Java里可以这样写：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">int i = 0;</div><div class="line">boolean foundIt = <span class="literal">false</span>;</div><div class="line"><span class="keyword">while</span>( i &lt; args.length)&#123;</div><div class="line">    <span class="keyword">if</span>(args[i].startsWith(<span class="string">"-"</span>))&#123;</div><div class="line">        i = i + 1;</div><div class="line">        <span class="built_in">continue</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(args[i].endsWith(<span class="string">".scala"</span>))&#123;</div><div class="line">        foundIt = <span class="literal">true</span>;</div><div class="line">        <span class="built_in">break</span>;</div><div class="line">    &#125;</div><div class="line">    i = i + 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>用scala可以这样写：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var i = 0;</div><div class="line">var foundIt = <span class="literal">false</span>;</div><div class="line"><span class="keyword">while</span>(i &lt; args.lenght &amp;&amp; !foundIt)&#123;</div><div class="line">    <span class="keyword">if</span>(!args[i].startsWith(<span class="string">"-"</span>))&#123;</div><div class="line">        <span class="keyword">if</span>(args[i].endsWith(<span class="string">".scala"</span>))</div><div class="line">            foundIt = <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    i = i + 1</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="try表达式"><a href="#try表达式" class="headerlink" title="try表达式"></a>try表达式</h2><p>Scala的try/catch/finally语法和java类似，不同之处在于catch代码块中使用匹配表达式的方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">try&#123;</div><div class="line">    openAndReadAFile(filename)</div><div class="line">&#125;catch&#123;</div><div class="line">    <span class="keyword">case</span> e: FileNotFoundException =&gt; println(<span class="string">"Couldn't find that file."</span>)</div><div class="line">    <span class="keyword">case</span> e: IOException =&gt; println(<span class="string">"Had an IOException trying to read that file"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果异常是FileNotFoundException，则第一个子句执行，如果是IOException则第二个子句执行，如果都不是，那么try-catch将终结并把异常上升出去。</p>
<h3 id="生成值"><a href="#生成值" class="headerlink" title="生成值"></a>生成值</h3><p>和其他大多数Scala控制结构一样，try-catch-finally也产生值，例如以下例子，如果URL格式错误就使用默认值。返回的结果是，如果没有异常抛出，则对应于try子句;如果抛出异常并被捕获，则对应于相应的catch子句。如果异常被抛出但没被捕获，表达式就没有返回值，由finally计算得到的值，即使有也会被抛弃。<strong>通常finally子句做一些诸如关闭文件之类的清理工作，他们不应该修改函数体或catch子句中计算的值。</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">def urlFor(path: String) = </div><div class="line">    try&#123;</div><div class="line">        new URL(path)</div><div class="line">    &#125;catch&#123;</div><div class="line">        <span class="keyword">case</span> e: MalformedURLException =&gt; new URL(<span class="string">"http://chaohui.me"</span>)</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>但是如果finally语句包含了返回语句或者抛出了一个异常，这个异常值或异常就会”凌驾”于任何之前在try代码块或某个catch子句里产生的值或异常之上。例如<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">def f(): Int = try&#123; <span class="built_in">return</span> 1 &#125; finally &#123; <span class="built_in">return</span> 2 &#125;</div><div class="line">def g(): Int = try&#123; 1 &#125; finally &#123; 2&#125;</div></pre></td></tr></table></figure></p>
<p>f() 返回2,但是g()返回1<br>这两个例子有点诡异，通常最好避免用finally子句返回值。</p>
<h2 id="match表达式"><a href="#match表达式" class="headerlink" title="match表达式"></a>match表达式</h2><p>类似于其他语言的switch语句，但是match表达式可以返回值。并且不同于其他类型的case语句中只能使用整形或者枚举类型，match的case语句中可以是任意类型的变量，同时每个备选项后没有break。例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">i match &#123;</div><div class="line">    <span class="keyword">case</span> 1 =&gt; println(<span class="string">"January"</span>)</div><div class="line">    <span class="keyword">case</span> 2 =&gt; println(<span class="string">"February"</span>)</div><div class="line">    <span class="keyword">case</span> _ =&gt; println(<span class="string">"I just don't want to write"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">def getClassAsString(x: Any): String = x match&#123;</div><div class="line">    <span class="keyword">case</span> s: String =&gt; s + <span class="string">" is a String"</span></div><div class="line">    <span class="keyword">case</span> i: Int =&gt; i + <span class="string">" is a Int"</span></div><div class="line">    <span class="keyword">case</span> l: List[_] =&gt; <span class="string">"List"</span></div><div class="line">    <span class="keyword">case</span> _ =&gt; <span class="string">"Unknown"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第一个例子中的1，2后边其实是省略了Int，因为可以自动推断出来。<br>另外针对默认情况，不仅仅可以使用_，还可以使用其他字符，以表明用来匹配默认情况。例如第二个例子中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> whoa =&gt; whoa + <span class="string">" is unknown"</span></div></pre></td></tr></table></figure></p>
<p>说明两点：<br>1.使用_和使用其他字符的区别是，使用_只能匹配，但是无法读取该变量，例如使用whoa就可以写成 <code>=&gt;whoa + &quot;is unknown&quot;</code>,使用_就只能写个”is unknow”,是无法读取该变量的。<br>2.为什么使用whoa或其他字符，会被认为是默认情况呢？因为whoa被当作一个<strong>变量</strong>来使用了。</p>
<h3 id="一条case语句匹配多个条件"><a href="#一条case语句匹配多个条件" class="headerlink" title="一条case语句匹配多个条件"></a>一条case语句匹配多个条件</h3><p>例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">i match&#123;</div><div class="line">    <span class="keyword">case</span> 1 | 3 | 5 | 7 | 9 =&gt; println(<span class="string">"odd"</span>)</div><div class="line">    <span class="keyword">case</span> 2 | 4 | 6 | 8 | 10 =&gt; println(<span class="string">"even"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;scala的控制结构，仅有if,while,for,try,match和函数调用而已。&lt;/p&gt;
&lt;h2 id=&quot;If表达式&quot;&gt;&lt;a href=&quot;#If表达式&quot; class=&quot;headerlink&quot; title=&quot;If表达式&quot;&gt;&lt;/a&gt;If表达式&lt;/h2&gt;&lt;p&gt;Scala的if语句与其他语言if语句，没有什么不同，但是Scala的if语句是能返回值的表达式。例如：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;val filename = &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!args.isEmpty) args(0) &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;default.txt&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="scala" scheme="https://cirfe.github.io/categories/scala/"/>
    
    
      <category term="控制结构" scheme="https://cirfe.github.io/tags/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Scala学习(一)：基本数据类型</title>
    <link href="https://cirfe.github.io/2016/11/15/learn-scala-1/"/>
    <id>https://cirfe.github.io/2016/11/15/learn-scala-1/</id>
    <published>2016-11-15T14:31:52.000Z</published>
    <updated>2016-11-15T15:03:11.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><ul>
<li>Byte     8位有符号补码整数($-2^7$ ~ $ 2^7 $-1)</li>
<li>Short    16位有符号补码整数($-2^{15}$~$2^{15}$-1)</li>
<li>Int      32位有符号补码整数($-2^{31}$~$2^{31}$-1)</li>
<li>Long     64位有符号补码整数($-2^{63}$~$2^{63}$-1)</li>
<li>Char     16位无符号Unicode字符（0~$2^{16}$-1)</li>
<li>String   char 序列</li>
<li>Float    32位IEEE754单精度浮点数</li>
<li>Double   64位IEEE754单精度浮点数</li>
<li>Boolean  true或false<a id="more"></a> 
<strong>String归于java.lang,其余所有基本类型都是包scala的成员</strong></li>
</ul>
<h2 id="操作符和方法"><a href="#操作符和方法" class="headerlink" title="操作符和方法"></a>操作符和方法</h2><p>Scala为基本类型提供了丰富的操作符集，而这些操作符实际只是普通方法调用的另一种形式，例如1 + 2和1.+(2)其实是一回事，因为<strong>Scala的基本类型也是对象</strong>。</p>
<h3 id="任何方法都可以是操作符"><a href="#任何方法都可以是操作符" class="headerlink" title="任何方法都可以是操作符"></a>任何方法都可以是操作符</h3><p>Scala里的操作符不是特殊的语法，任何方法都可以是操作符。到底是方法还是操作符取决于如何使用它。如果写成<code>s.indexOf(&#39;o&#39;)</code>,indexOf就不是操作符，但如果写成<code>s indexOf &#39;o&#39;</code>,那么indexOf就是操作符。</p>
<h3 id="关于前缀操作符和后缀操作符"><a href="#关于前缀操作符和后缀操作符" class="headerlink" title="关于前缀操作符和后缀操作符"></a>关于前缀操作符和后缀操作符</h3><p>中缀操作符是二元操作符，而前缀操作符和后缀操作符都是一元的。前缀操作符例子，-2.0,!found，这些前缀操作符和中缀操作符一样，都是值类型对象调用方法的简写形式，然而这种情况下，方法名在操作符字符上前缀<code>unary_</code>,例如Scala会把表达式-2.0转化成方法调用：(-2.0).unary_-。标识符中能作为前缀操作符的只有<strong>+、-、!、~</strong>。因此对类型定义了unary_!的方法，就可以对值或变量用!p这样的方式调用，但是即使定义了unary_*的方法，也不能用*p调用，因为*不是那四个操作符之一。如果像*p这样调用，Scala会理解为*.p，可能会出现莫名错误。</p>
<blockquote>
<p>在Scala里，方法调用的<strong>空括号</strong>可以省略，惯例是如果方法带有副作用就加上括号，如println();如果没有副作用就去掉括号,如String的toLowerCase方法。</p>
</blockquote>
<h3 id="操作符优先级"><a href="#操作符优先级" class="headerlink" title="操作符优先级"></a>操作符优先级</h3><table>
<thead>
<tr>
<th style="text-align:center">操作符优先级（降序）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">* / %</td>
</tr>
<tr>
<td style="text-align:center">+ -</td>
</tr>
<tr>
<td style="text-align:center">:</td>
</tr>
<tr>
<td style="text-align:center">!=</td>
</tr>
<tr>
<td style="text-align:center">&lt;&gt;</td>
</tr>
<tr>
<td style="text-align:center">&amp;</td>
</tr>
<tr>
<td style="text-align:center">^</td>
</tr>
<tr>
<td style="text-align:center">\</td>
</tr>
<tr>
<td style="text-align:center">(所有字母)</td>
</tr>
<tr>
<td style="text-align:center">(所有赋值操作符)</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本类型&quot;&gt;&lt;a href=&quot;#基本类型&quot; class=&quot;headerlink&quot; title=&quot;基本类型&quot;&gt;&lt;/a&gt;基本类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Byte     8位有符号补码整数($-2^7$ ~ $ 2^7 $-1)&lt;/li&gt;
&lt;li&gt;Short    16位有符号补码整数($-2^{15}$~$2^{15}$-1)&lt;/li&gt;
&lt;li&gt;Int      32位有符号补码整数($-2^{31}$~$2^{31}$-1)&lt;/li&gt;
&lt;li&gt;Long     64位有符号补码整数($-2^{63}$~$2^{63}$-1)&lt;/li&gt;
&lt;li&gt;Char     16位无符号Unicode字符（0~$2^{16}$-1)&lt;/li&gt;
&lt;li&gt;String   char 序列&lt;/li&gt;
&lt;li&gt;Float    32位IEEE754单精度浮点数&lt;/li&gt;
&lt;li&gt;Double   64位IEEE754单精度浮点数&lt;/li&gt;
&lt;li&gt;Boolean  true或false
    
    </summary>
    
      <category term="scala" scheme="https://cirfe.github.io/categories/scala/"/>
    
    
      <category term="数据类型" scheme="https://cirfe.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="操作符" scheme="https://cirfe.github.io/tags/%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://cirfe.github.io/2016/11/14/hello-world/"/>
    <id>https://cirfe.github.io/2016/11/14/hello-world/</id>
    <published>2016-11-14T08:30:45.544Z</published>
    <updated>2016-11-14T08:30:45.544Z</updated>
    
    <content type="html"><![CDATA[<p>折腾了一天总算是基本搞定了。记录下几个问题：</p>
<h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><h3 id="安装hexo出问题"><a href="#安装hexo出问题" class="headerlink" title="安装hexo出问题"></a>安装hexo出问题</h3><p>  第一次安装NodeJS的时候采用的apt方式安装，然后再装hexo出现了莫名其妙的问题。安装最新的NodeJS问题解决。</p>
<h3 id="使用npm安装组件卡住"><a href="#使用npm安装组件卡住" class="headerlink" title="使用npm安装组件卡住"></a>使用npm安装组件卡住</h3><a id="more"></a>
<p>  使用淘宝源，在命令后添加 –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="external">https://registry.npm.taobao.org</a>.<br>  例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$npm</span> install hexo-server --save --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>
<h3 id="deploy后，在github上访问出现大量空白"><a href="#deploy后，在github上访问出现大量空白" class="headerlink" title="deploy后，在github上访问出现大量空白"></a>deploy后，在github上访问出现大量空白</h3><p>  github的问题，<a href="https://github.com/iissnan/hexo-theme-next/issues/1214" target="_blank" rel="external">解决方法</a></p>
<h2 id="hexo-的简单使用"><a href="#hexo-的简单使用" class="headerlink" title="hexo 的简单使用"></a>hexo 的简单使用</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;折腾了一天总算是基本搞定了。记录下几个问题：&lt;/p&gt;
&lt;h2 id=&quot;Questions&quot;&gt;&lt;a href=&quot;#Questions&quot; class=&quot;headerlink&quot; title=&quot;Questions&quot;&gt;&lt;/a&gt;Questions&lt;/h2&gt;&lt;h3 id=&quot;安装hexo出问题&quot;&gt;&lt;a href=&quot;#安装hexo出问题&quot; class=&quot;headerlink&quot; title=&quot;安装hexo出问题&quot;&gt;&lt;/a&gt;安装hexo出问题&lt;/h3&gt;&lt;p&gt;  第一次安装NodeJS的时候采用的apt方式安装，然后再装hexo出现了莫名其妙的问题。安装最新的NodeJS问题解决。&lt;/p&gt;
&lt;h3 id=&quot;使用npm安装组件卡住&quot;&gt;&lt;a href=&quot;#使用npm安装组件卡住&quot; class=&quot;headerlink&quot; title=&quot;使用npm安装组件卡住&quot;&gt;&lt;/a&gt;使用npm安装组件卡住&lt;/h3&gt;
    
    </summary>
    
      <category term="Web" scheme="https://cirfe.github.io/categories/Web/"/>
    
    
      <category term="Hexo" scheme="https://cirfe.github.io/tags/Hexo/"/>
    
      <category term="Github" scheme="https://cirfe.github.io/tags/Github/"/>
    
  </entry>
  
</feed>
